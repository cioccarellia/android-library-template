/**
 * Designed and developed by Andrea Cioccarelli (@cioccarellia)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.buildconfig.dependencies.Dependencies
import com.buildconfig.model.ModuleArtifactCoordinates
import com.buildconfig.switches.Switches

/**
 * Module identifier, used across the project to reference this subproject.
 * */
ext.module_name = "complex_numbers"

/**
 * Deploying Coordinates for local module.
 * */
project.ext.set("module_${ext.module_name}", new ModuleArtifactCoordinates(
        // PUBLISH_GROUP_ID
        "com.cioccarellia",
        
        // PUBLISH_ARTIFACT_ID
        "complexnumbers",
        
        // PUBLISH_ARTIFACT_DESC
        "Complex Number & Mathematics Kotlin Library",
        
        // PUBLISH_ARTIFACT_WEBSITE
        "https://github.com/cioccarellia/android-library-template",
        
        // PUBLISH_VERSION
        "1.0.0"
))

apply from: rootProject.file("scripts/commons/library_config.gradle")
apply from: rootProject.file("scripts/publishing/publish_mavencentral.gradle")

/**
 * Library versioning
 * */
android {
    defaultConfig {
        versionName "1.0.0-library"
        versionCode 1
    }
}


/**
 * Library dependencies
 * */
dependencies {
    compileOnly Dependencies.androidXAnnotation
    implementation Dependencies.stdlib
    
    testImplementation Dependencies.junit
    testImplementation Dependencies.androidXTestCore
    testImplementation Dependencies.mockitoCore
    testImplementation Dependencies.googleTruth
    testImplementation Dependencies.robolectric
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        if (Switches.explicitApiModeForLibraryModules) {
            freeCompilerArgs += [
                    //'-progressive',
                    '-Xexplicit-api=strict',
            ]
        }
    }
}